#action: DO_MASK; DO_KERNEL; DO_NOISE; DO_SIGNAL; DO_DATA; DO_QB; DO_MUB; 
# DO_ALL =  DO_KERNEL + DO_NOISE + DO_SIGNAL + DO_DATA + DO_QB + DO_MUB;
# DO_ALL_BUT_KERNEL = DO_NOISE + DO_SIGNAL +  DO_DATA + DO_QB + DO_MUB;
#if you are running it for the first time, you do DO_MASK first then DO_ALL.
#in case of failure of DO_QB or DO_MUB, you can reduce the number of ell bins and rerun DO_QB and DO_MUB. (no need to rerun other steps).
action = DO_MUB
#DO_ALL_BUT_KERNEL

# I, QU, or IQU
map_genre = IQU
#unit 
map_unit = muK
# set upperbound and lowerbound to reduce bad pixel contaminations
map_maxval = 300.
map_minval = -300.


#lmax used for data analysis
lmax_data = 300
#lmin used for data analysis
lmin_data = 20
#number of ell bins (the binning is automatically done)
num_ell_bins = 10

#number of channels
num_channels = 3
sim_index_width = 4
channel1_name = x1
channel2_name = x3
channel3_name = x5

##number of iterations
num_iterations = 8
#output q_b root, the outputs will be ROOT_ITER1.dat, ROOT_ITER2.dat ...
qb_output_root = spider/qb
mub_output_root = spider/mub
cl_output_root = spider/cl

#mask root; the i-th mask file will be ROOT_i.fits
## hits cut
hits_root = spider/data/proj
hits_cut = 1.
##additional cut for polarization
cond_root = spider/data/cond
cond_cut = 1.

mask_root = spider/data/mask
smooth_mask_edge = T
lmax_mask = 300

#map root; the i-th map file will be ROOT_i.fits
data_map_root = spider/data/map


#number of noise simulations
num_noise_sims = 18
#noise simulation root; simulation i of j-th channel map is ROOT_j_SIMi.fits; these files are used to calculate the noise pseudo power spectrum N_l's.
noise_sim_root = spider/noise/map
noise_cl_root = spider/noise/noisecl



#number of signal simulations
num_signal_sims = 20
#signal simulation root; simulation i of j-th map is ROOT_j_SIMi.fits; these files are used to calculate the transfer F_l's.
signal_sim_root = spider/signal/r0/map
signal_cl_root = spider/signal/r0/signalcl


#model cl
model_cl_file = spider/r0_totCls.dat


#########################################################################
#kernel root, the ith- and j-th cross mask kernel file will be saved as ROOT_i_j.fits
kernel_root = spider/data/kernel
#this must be >= lmax_data
lmax_kernel = 400

#data pseudo cl root; the pseudo Cl for i-th map and j-th map cross correlation will be ROOT_i_j.fits
data_cl_root = spider/data/datacl

#noise pseudo cl root; the pseudo Cl for i-th map and j-th map cross correlation will be ROOT_i_j.fits


