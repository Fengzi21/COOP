#action: DO_MASK; DO_KERNEL; DO_NOISE; DO_SIGNAL; DO_DATA; DO_QB; DO_MUB; 
# DO_ALL =  DO_MASK + DO_KERNEL + DO_NOISE + DO_SIGNAL + DO_DATA + DO_QB + DO_MUB;
# DO_ALL_BUT_MASK = DO_KERNEL + DO_NOISE + DO_SIGNAL +  DO_DATA + DO_QB + DO_MUB;
# DO_ALL_BUT_KERNEL = DO_NOISE + DO_SIGNAL +  DO_DATA + DO_QB + DO_MUB;
# UPDATE_DATA = DO_DATA + DO_QB + DO_MUB;
#in case of failure of DO_QB or DO_MUB, you can reduce the number of ell bins and rerun DO_QB and DO_MUB. (no need to rerun other steps).
action = UPDATE_DATA

# I, QU, or IQU
map_genre = IQU
#unit 
map_unit = muK
# set upperbound and lowerbound to reduce bad pixel contaminations
map_maxval = 300.
map_minval = -300.


#lmax used for data analysis
lmax_data = 300
#lmin used for data analysis
lmin_data = 30
#number of ell bins (the binning is automatically done)
num_ell_bins = 8

#number of channels
num_channels = 3
##channel names
channel1_name = x1
channel2_name = x3
channel3_name = x5
##number of digits 
sim_index_width = 4

##number of iterations
num_iterations = 12
#output q_b root, the outputs will be ROOT_ITER1.dat, ROOT_ITER2.dat ...
qb_output_root = outputs/qb
mub_output_root = outputs/mub
cl_output_root = outputs/cl

#***************************** MASK **********************************
#mask root; the i-th mask file will be ROOT_i.fits
mask_root = spider/data/mask
#smooth_mask_arcmin = 20.
lmax_mask = 300
## --- hits cut
hits_root = spider/data/proj
hits_cut = 1.
##----condition number cut
#cond_root = spider/data/cond
#cond_cut = 7.
##---- RA-DEC cut (in degrees)
RA_min = 10
RA_max = 85
DEC_min = -58
DEC_max = -13

## ****************************KNERNEL *********************************
#kernel root, the ith- and j-th cross mask kernel file will be saved as ROOT_i_j.fits
kernel_root = spider/data/kernel
#this must be >= lmax_data
lmax_kernel = 400

##************************NOISE SIMULATIONS ****************************
#number of noise simulations
num_noise_sims = 18
#noise simulation root; simulation i of j-th channel map is ROOT_j_SIMi.fits; these files are used to calculate the noise pseudo power spectrum N_l's.
noise_sim_root = spider/noise/map
#noise pseudo cl root (intermediate resutls); the pseudo Cl for i-th map and j-th map cross correlation will be ROOT_i_j.fits 
noise_cl_root = spider/noise/noisecl


##*********************** SIGNAL SIMULATIONS *************************
#number of signal simulations
num_signal_sims = 20
#signal simulation root; simulation i of j-th map is ROOT_j_SIMi.fits; these files are used to calculate the transfer F_l's.
signal_sim_root = spider/signal/r0/map
#signal pseudo cl root (intermediate resutls); the pseudo Cl for i-th map and j-th map cross correlation will be ROOT_i_j.fits 
signal_cl_root = spider/signal/r0/signalcl
#input model cl
model_cl_file = spider/models/r0_totCls.dat


##*********************** DATA ***************************************
#map root; the i-th map file will be ROOT_i.fits
data_map_root = spider/data/dbl
##output data pseudo cls (intermediate resutls), the pseudo Cl for i-th map and j-th map cross correlation will be ROOT_i_j.fits 
data_cl_root = spider/data/datacl






